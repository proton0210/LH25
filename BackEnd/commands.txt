# AWS CLI Commands for Creating Sample Users

## Prerequisites - Updated with your actual AWS values
export AWS_PROFILE=workshop
export USER_POOL_ID="ap-south-1_0KFpHhmL7"
export CLIENT_ID="5b91j4jdmcu7bfqmmberf3udfm"
export REGION="ap-south-1"
export STATE_MACHINE_ARN="arn:aws:states:ap-south-1:585768150182:stateMachine:user-creation-workflow"
export BUCKET_NAME="lh-user-files-585768150182-ap-south-1"
export USER_TABLE="lh-users"

## Complete Sign-Up Script for Vidit Shah

### Save this as signup-vidit.sh and run it after setting the variables
```bash
#!/bin/bash

# Set AWS Profile
export AWS_PROFILE=workshop

# Set your values here
USER_POOL_ID="ap-south-1_0KFpHhmL7"
CLIENT_ID="5b91j4jdmcu7bfqmmberf3udfm"
REGION="ap-south-1"
STATE_MACHINE_ARN="arn:aws:states:ap-south-1:585768150182:stateMachine:user-creation-workflow"
BUCKET_NAME="lh-user-files-585768150182-ap-south-1"

echo "Starting sign-up process for Vidit Shah..."

# Sign up
echo "Step 1: Signing up user..."
aws cognito-idp sign-up \
  --client-id $CLIENT_ID \
  --username vidit0210@gmail.com \
  --password "Qwerty123!" \
  --user-attributes \
    Name=email,Value=vidit0210@gmail.com \
    Name=custom:firstName,Value=Vidit \
    Name=custom:lastName,Value=Shah \
    Name=custom:contactNumber,Value=+919876543210 \
  --region $REGION

echo "Waiting 2 seconds..."
sleep 2

# Confirm sign-up (this triggers PostConfirmation Lambda)
echo "Step 2: Confirming user (this will trigger the workflow)..."
aws cognito-idp admin-confirm-sign-up \
  --user-pool-id $USER_POOL_ID \
  --username vidit0210@gmail.com \
  --region $REGION

echo "Waiting 5 seconds for workflow to complete..."
sleep 5

# Add to user group
echo "Step 3: Adding user to 'user' group..."
aws cognito-idp admin-add-user-to-group \
  --user-pool-id $USER_POOL_ID \
  --username vidit0210@gmail.com \
  --group-name user \
  --region $REGION

# Verify user
echo "Step 4: Verifying user creation..."
aws cognito-idp admin-get-user \
  --user-pool-id $USER_POOL_ID \
  --username vidit0210@gmail.com \
  --region $REGION

# Check Step Functions
echo "Step 5: Checking Step Functions execution..."
aws stepfunctions list-executions \
  --state-machine-arn $STATE_MACHINE_ARN \
  --max-results 1 \
  --region $REGION

# List S3 folders
echo "Step 6: Checking S3 for user folder..."
aws s3 ls s3://$BUCKET_NAME/ --region $REGION

echo "Sign-up process complete!"
```

## Real Sign-Up Process (Triggers PostConfirmation Lambda)

### Sign up Vidit Shah (vidit0210@gmail.com)
# This mimics the actual sign-up flow that will trigger the PostConfirmation Lambda

# Step 1: Sign up the user
aws cognito-idp sign-up \
  --client-id $CLIENT_ID \
  --username vidit0210@gmail.com \
  --password "Qwerty123!" \
  --user-attributes \
    Name=email,Value=vidit0210@gmail.com \
    Name=custom:firstName,Value=Vidit \
    Name=custom:lastName,Value=Shah \
    Name=custom:contactNumber,Value=+919876543210 \
  --region $REGION

# Step 2: Auto-confirm the user (for testing - normally user would click email link)
# This will trigger the PostConfirmation Lambda and Step Functions workflow
aws cognito-idp admin-confirm-sign-up \
  --user-pool-id $USER_POOL_ID \
  --username vidit0210@gmail.com \
  --region $REGION

# Step 3: Add user to 'user' group (default tier)
aws cognito-idp admin-add-user-to-group \
  --user-pool-id $USER_POOL_ID \
  --username vidit0210@gmail.com \
  --group-name user \
  --region $REGION

# Step 4: Verify the user was created successfully
aws cognito-idp admin-get-user \
  --user-pool-id $USER_POOL_ID \
  --username vidit0210@gmail.com \
  --region $REGION

# Step 5: Test authentication
aws cognito-idp initiate-auth \
  --client-id $CLIENT_ID \
  --auth-flow USER_PASSWORD_AUTH \
  --auth-parameters USERNAME=vidit0210@gmail.com,PASSWORD="Qwerty123!" \
  --region $REGION

## Monitor the Process

# Check Step Functions execution (replace with your state machine ARN)
export STATE_MACHINE_ARN="arn:aws:states:$REGION:YOUR_ACCOUNT:stateMachine:user-creation-workflow"
aws stepfunctions list-executions \
  --state-machine-arn $STATE_MACHINE_ARN \
  --region $REGION

# Check DynamoDB for user record (scan to see all users)
aws dynamodb scan \
  --table-name lh-users \
  --region $REGION

# Check S3 for user folder
aws s3 ls s3://$BUCKET_NAME/ \
  --region $REGION

# Check Lambda logs for PostConfirmation
aws logs tail /aws/lambda/BackEndStack-PostConfirmationLambdaC4F60401-hiTR9uqQpMcV \
  --follow \
  --region $REGION

## Alternative: Create Pre-Confirmed User (Bypasses PostConfirmation)

## Create Sample Users

### 1. Create Standard User (user group)
# Create user
aws cognito-idp admin-create-user \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --user-attributes \
    Name=email,Value=user@example.com \
    Name=email_verified,Value=true \
    Name=custom:firstName,Value=John \
    Name=custom:lastName,Value=Doe \
  --message-action SUPPRESS \
  --region $REGION

# Set permanent password
aws cognito-idp admin-set-user-password \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --password "UserPass123!" \
  --permanent \
  --region $REGION

# Add to user group
aws cognito-idp admin-add-user-to-group \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --group-name user \
  --region $REGION

### 2. Create Paid User (paid group)
# Create user
aws cognito-idp admin-create-user \
  --user-pool-id $USER_POOL_ID \
  --username paid@example.com \
  --user-attributes \
    Name=email,Value=paid@example.com \
    Name=email_verified,Value=true \
    Name=custom:firstName,Value=Jane \
    Name=custom:lastName,Value=Smith \
  --message-action SUPPRESS \
  --region $REGION

# Set permanent password
aws cognito-idp admin-set-user-password \
  --user-pool-id $USER_POOL_ID \
  --username paid@example.com \
  --password "PaidPass123!" \
  --permanent \
  --region $REGION

# Add to paid group
aws cognito-idp admin-add-user-to-group \
  --user-pool-id $USER_POOL_ID \
  --username paid@example.com \
  --group-name paid \
  --region $REGION

### 3. Create Admin User (admin group)
# Create user
aws cognito-idp admin-create-user \
  --user-pool-id $USER_POOL_ID \
  --username admin@example.com \
  --user-attributes \
    Name=email,Value=admin@example.com \
    Name=email_verified,Value=true \
    Name=custom:firstName,Value=Admin \
    Name=custom:lastName,Value=User \
  --message-action SUPPRESS \
  --region $REGION

# Set permanent password
aws cognito-idp admin-set-user-password \
  --user-pool-id $USER_POOL_ID \
  --username admin@example.com \
  --password "AdminPass123!" \
  --permanent \
  --region $REGION

# Add to admin group
aws cognito-idp admin-add-user-to-group \
  --user-pool-id $USER_POOL_ID \
  --username admin@example.com \
  --group-name admin \
  --region $REGION

## Verify Users Were Created

# List all users
aws cognito-idp list-users \
  --user-pool-id $USER_POOL_ID \
  --region $REGION

# Check user groups for a specific user
aws cognito-idp admin-list-groups-for-user \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --region $REGION

# List all groups
aws cognito-idp list-groups \
  --user-pool-id $USER_POOL_ID \
  --region $REGION

# List users in a specific group
aws cognito-idp list-users-in-group \
  --user-pool-id $USER_POOL_ID \
  --group-name user \
  --region $REGION

## Test Authentication

# Authenticate as standard user
aws cognito-idp admin-initiate-auth \
  --user-pool-id $USER_POOL_ID \
  --client-id $CLIENT_ID \
  --auth-flow ADMIN_NO_SRP_AUTH \
  --auth-parameters USERNAME=user@example.com,PASSWORD="UserPass123!" \
  --region $REGION

# Authenticate as paid user
aws cognito-idp admin-initiate-auth \
  --user-pool-id $USER_POOL_ID \
  --client-id $CLIENT_ID \
  --auth-flow ADMIN_NO_SRP_AUTH \
  --auth-parameters USERNAME=paid@example.com,PASSWORD="PaidPass123!" \
  --region $REGION

# Authenticate as admin
aws cognito-idp admin-initiate-auth \
  --user-pool-id $USER_POOL_ID \
  --client-id $CLIENT_ID \
  --auth-flow ADMIN_NO_SRP_AUTH \
  --auth-parameters USERNAME=admin@example.com,PASSWORD="AdminPass123!" \
  --region $REGION

## Delete Test Users (Cleanup)

# Delete standard user
aws cognito-idp admin-delete-user \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --region $REGION

# Delete paid user
aws cognito-idp admin-delete-user \
  --user-pool-id $USER_POOL_ID \
  --username paid@example.com \
  --region $REGION

# Delete admin user
aws cognito-idp admin-delete-user \
  --user-pool-id $USER_POOL_ID \
  --username admin@example.com \
  --region $REGION

## Helper Commands

# Get user details
aws cognito-idp admin-get-user \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --region $REGION

# Update user attributes
aws cognito-idp admin-update-user-attributes \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --user-attributes \
    Name=custom:firstName,Value=Johnny \
    Name=custom:lastName,Value=Doe \
  --region $REGION

# Disable a user
aws cognito-idp admin-disable-user \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --region $REGION

# Enable a user
aws cognito-idp admin-enable-user \
  --user-pool-id $USER_POOL_ID \
  --username user@example.com \
  --region $REGION

## Notes:
# 1. The --message-action SUPPRESS flag prevents Cognito from sending welcome emails
# 2. Passwords must meet the policy: min 8 chars, uppercase, lowercase, digit, symbol
# 3. The email_verified=true attribute bypasses email verification
# 4. ADMIN_NO_SRP_AUTH requires the app client to have ALLOW_ADMIN_USER_PASSWORD_AUTH enabled
# 5. These commands create users directly without triggering the PostConfirmation Lambda

## Sample User Credentials:
# Standard User: user@example.com / UserPass123!
# Paid User: paid@example.com / PaidPass123!
# Admin User: admin@example.com / AdminPass123!